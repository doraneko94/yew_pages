= 環境構築と技術解説

== Github Pages

Github Pages（ギットハブ・ページズ）は、Github上のリポジトリを使ってWebサイトを無料で公開できるサービスです。
Githubのアカウントがあれば誰でも使用できる機能なので、アカウントをお持ちでない場合はGithubのサイトでアカウント作成（サインアップ）してください。

//blankline
[外部リンク] Github

@<href>{https://github.com/}
//blankline

アカウント名は好きに設定していただいて構いません。本書では、読者のアカウント名に相当する箇所を@<code>{[your-user-name]}で記述します。

Github Pegesのようなサービスを@<b>{ホスティングサーバ}といいます。
一般に、ホスティングの形式には@<b>{静的}・@<b>{動的}の2種類が存在していますが、Github Pagesは静的ホスティングにのみ対応しています。
静的ホスティングとは、Webサイトを見にきたクライアント（ユーザ）に対して、常に同じ内容のページを送信するサービスです。
それに対し動的ホスティングでは、クライアントからのリクエスト内容に応じて、送信するページの内容を「動的に」生成します。

これを聞いて、静的ホスティングしかできないGithub Pagesでは、Webアプリを運営することはできないのではないか？と感じた読者も多いと思います。
なぜならば、私たちが日頃から利用しているWebアプリの多くが、ユーザからの様々なリクエストに対して適切な応答を返すサービスであるからです。

しかし、ホスティングが静的であることと、Webページの内容が常に固定されていることは同義ではありません。
Webページに@<b>{スクリプト}や@<b>{バイナリ}を含めることによって、見た目には「動的な」応答を作り出すことができます。

確かに、動的ホスティングサービスを使って作れるWebアプリと比べると、Github Pagesが提供できる機能には制限があります。
たとえば、ログイン機能はホスティングサーバでの照合処理が必要になるため、Github Pagesでは実装することができません。
しかし、私たちがWebアプリに求める多くの機能は、実は静的ホスティングでも十分に対応が可能なのです。

本書では、静的ホスティングでも提供可能な様々な機能を紹介します。
もし、読者の頭に「こういうサービスを気に入ってくれる人がいるのでは？」というアイデアが浮かんで、それが本書で紹介した機能で実現可能なのであれば、Github Pagesを使って「サッ」と公開してしまいましょう。
そして、実際にユーザに使ってもらってフィードバックを受け、サービスをさらに良いものにする…という流れが実現されたなら、著者としてこれ以上に嬉しいことはありません。

== WebAssembly（WASM）

静的ホスティングで「動的な」機能を実現するためには、@<b>{JavaScript}（JS）を使用することが多いです。しかし本書では@<b>{WebAssembly} （WASM）を使用します。JSがスクリプトであるのに対し、WASMはバイナリであるという違いがあります。

私たちは人間が読める言語を使ってプログラミングをします。この人間語がスクリプトです。これをWebアプリとして実行するためには、インタプリタによって機械語へ翻訳する必要があります。一方、WASM等のバイナリは機械語への翻訳後（コンパイル済み）のファイルなので、実行時に翻訳する必要がありません。この、実行時に翻訳の手間を省けることに加え、WASMがC/C++やRustなどの高速な言語をコンパイルしたものであることから、JavaScriptに比べて実行速度がかなり速くなります。本書では、WebアプリでWASMの機能が生きる例も紹介します。

== Rust

WASMを生成するために、本書では@<b>{Rust}を使用します。Rustは安全性・高速性・並列性に優れた開発言語です。安全性とは、悪意を持ったユーザの攻撃対象となるようなバグを作り込みにくいということであり、高速性と並列性はそのままプログラムの軽快な動作に繋がります。このようにWebアプリにとって嬉しい特徴を備えていることから、本書ではRustを採用しました。RustはWebアプリに限らず、オペレーティングシステム（OS）開発や組み込み開発などのコアな業界でも広く採用されており、今後もシェアを大きく伸ばしていくと予想されています。

=== Rustのインストール

Rustをインストールする手順は、公式サイトを参考にしてください。

//blankline
[外部リンク] Rustプログラミング言語（公式）

@<href>{https://www.rust-lang.org/ja}
//blankline

インストール作業後に@<list>{rust_version}のコマンドを実行し、Rustのバージョン情報が表示されたら、インストール手順が正しく完了したことを確認できます。

//list[rust_version][Rustのバージョン確認: shell]{
> rustc --version
//}

=== WASM向け@<code>{target}のインストール

Rustのインストールが完了すると、Rust言語で記述したコードを@<b>{ビルド}（コンパイル）してバイナリを作ることができるようになります。ただし、このバイナリは@<b>{どこで動かすか}（実行環境）によって中身が変わります。たとえば、Windows用・macOS用・Linux用では、それぞれ違う形式のバイナリが必要になります。

Rustでは、どの環境向けにバイナリを作るかを@<b>{ターゲット}によって指定します。このターゲットは3つの情報で表現されており、まとめて@<b>{ターゲットトリプル}（target triple）といいます。

//list[target_triple][ターゲットトリプルの構造]{
<アーキテクチャ（CPUの種類）>-<ベンダー（提供元）>-<OSの種類>
//}

Rustは普段、自分が動いているPC向けのターゲットでバイナリを作ります。しかし、任意のターゲットをインストールすることで、その環境向けのバイナリを生成することができます。この機能を@<b>{クロスビルド}（クロスコンパイル）といいます。

WASM向けのターゲットは@<code>{wasm32-unknown-unknown}です。@<code>{wasm32}はWebAssemblyの32ビットアーキテクチャを意味します。ベンダー情報・OS情報がともに@<code>{unknown}であり、特定の提供元やOSに縛られていないことから、WASMは非常に広い環境で動作することがわかります。

本書を読み進めるにあたっては、このターゲットを@<list>{install_target}のコマンドでインストールしておいてください。

//list[install_target][WASM向けターゲットのインストール: shell]{
> rustup target add wasm32-unknown-unknown
//}

== Yew

YewはRustでWebフロントエンドアプリケーションを作るためのフレームワーク（ライブラリ）です。WASMを生成するためのコードを、安全性に優れたRustで記述することができます。なお、Rustではライブラリのことを@<b>{クレート}と呼びます。

Yewなどのクレートを使用するためには、Rustのプロジェクト内で使うクレートとバージョンを宣言します。具体的な方法は@<chapref>{02-hello}以降で解説します。

== Trunk

Yewを使って記述したRustのコードからWASMを生成するために、@<b>{Trunk}を使用します。@<list>{install_trunk}のコマンドで、TrunkをRustにインストールしてください。

//list[install_trunk][Trunkのインストール: shell]{
cargo install --locked trunk
//}

TrunkはRustからWASMへのビルドを実行するだけでなく、それをHTMLファイルと結合してWASMが動作するWebページを生成します。また、PCにローカルなサーバ（localhost）を一時的に構築し、実際のページの動作を確認することもできます。

//info{
このあとのサンプルコードで、Trunkの動作時にエラーが生じた場合は公式ページ@<href>{https://trunkrs.dev/}のGetting Startedを参照してください。たとえば、Apple M1の環境では追加のコマンド実行が必要になる場合があります。
//}

